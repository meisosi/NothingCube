const { Composer } = require("telegraf");
const composer = new Composer();
const kb = require("../keyboars.json");
const utils = require("../utils");
const { Telegraf } = require("telegraf");

const bot = new Telegraf(process.env.TOKEN_BOT);

const rewards = {
  1: 1,
  2: 5,
  3: 10,
  4: 15,
  5: 20,
  6: 25
};

const getMenu = async (ctx, arg = null, edit = false) => {
  let user = await utils.getUserData(ctx.from.id);
  let stat = await utils.getUserStats(ctx.from.id);

  if (!user) {
    let username = ctx.from.first_name;
    await utils.createUser(ctx.from.id, username);
    user = await utils.getUserData(ctx.from.id);
  }

  if (!stat) {
    await utils.createUserStats(ctx.from.id);
    stat = await utils.getUserStats(ctx.from.id);
  }

  if(arg) {
    let action = arg.split('_')[0];
    if(action == 'promo') {
      let code = arg.slice(arg.indexOf('_') + 1);
      const promo = await utils.getPromocode(code);

      if (!promo || promo.activations <= 0) {
        const txt = promo
          ? "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è :(\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!"
          : "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!";

        await ctx.reply(txt, kb.promocodes_start);
      }

      else if (await utils.findPromocodeUses(ctx.from.id, code)) {
        const txt =
          "–¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!";
        await ctx.reply(txt, kb.promocodes_start);
      }
      else {
        await utils.decreasePromoActivations(code);
        await utils.updateUserData(ctx.from.id,promo.type,user[promo.type] + promo.count);
        await utils.addUserPromoUse(ctx.from.id, code);
  
        if (promo.type === "vip_status") {
          const rollsToAdd =
            promo.count >= 7 ? parseInt(process.env.ROLLS_ON_SUB) - 1 : 0;
          const coinsToAdd =
            promo.count >= 7
              ? parseInt(process.env.COINS_ON_7)
              : promo.count >= 30
              ? parseInt(process.env.COINS_ON_30)
              : promo.count >= 183
              ? parseInt(process.env.COINS_ON_183)
              : promo.count >= 365
              ? parseInt(process.env.COINS_ON_365)
              : 0;
  
          await utils.updateUserData(ctx.from.id,"rolls",user.rolls + rollsToAdd);
          await utils.updateUserData(ctx.from.id,"coins",user.coins + coinsToAdd);
        }
  
        let txt = "–£—Å–ø–µ—Ö!\n";
        let txtType = "";
        switch (promo.type) {
          case "coins":
            txtType = await utils.getDeclension(
              promo.count,
              "–º–æ–Ω–µ—Ç–∫—É",
              "–º–æ–Ω–µ—Ç–∫–∏",
              "–º–æ–Ω–µ—Ç–æ–∫"
            );
            break;
          case "gems":
            txtType = await utils.getDeclension(
              promo.count,
              "–ø–∞–∫–µ—Ç –ø–æ 60 –≥–µ–º–æ–≤",
              "–ø–∞–∫–µ—Ç–∞ –ø–æ 60 –≥–µ–º–æ–≤",
              "–ø–∞–∫–µ—Ç–æ–≤ –ø–æ 60 –≥–µ–º–æ–≤"
            );
            break;
          case "rolls":
            txtType = await utils.getDeclension(
              promo.count,
              "–±—Ä–æ—Å–æ–∫",
              "–±—Ä–æ—Å–∫–∞",
              "–±—Ä–æ—Å–∫–æ–≤"
            );
            break;
          case "items":
            txtType = await utils.getDeclension(
              promo.count,
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã",
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã",
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã"
            );
            break;
          case "vip_status":
            txtType = await utils.getDeclension(
              promo.count,
              "–¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏",
              "–¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏",
              "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            );
            break;
          case "friend_coin":
            txtType = await utils.getDeclension(
              promo.count,
              "–º–æ–Ω–µ—Ç–∫—É –¥—Ä—É–≥–∞",
              "–º–æ–Ω–µ—Ç–∫–∏ –¥—Ä—É–≥–∞",
              "–º–æ–Ω–µ—Ç–æ–∫ –¥—Ä—É–≥–∞"
            );
              break;
          default:
            txtType = await getDeclension(
              promo.count,
              "–º–æ–Ω–µ—Ç–∫—É",
              "–º–æ–Ω–µ—Ç–∫–∏",
              "–º–æ–Ω–µ—Ç–æ–∫"
            );
            break;
        }
        txt += `–ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –º—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ: ${promo.count} ${txtType}`;
        await ctx.reply(txt, kb.promocodes_start);
      }
    }
    else if(action == 'ref') {
      let referal = arg.slice(arg.indexOf('_') + 1);
      const userId = ctx.from.id; 
      let userDB = await utils.getUserData(userId);
      const createDate = new Date(userDB.created_at);
      if(((new Date().getTime() - createDate.getTime())/(1000*60) < 30) && !userDB.referal_id) {
        if(referal.startsWith('ad')) {
          referal = referal.slice(2)
          const adId = parseInt(referal);
          utils.addAdViews(adId);
          utils.linkReferal(userId, -1);
          ctx.sendMessage("–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç–æ–∫!");
          userDB.coins = userDB.coins + 100;
        }
        else {
          const referalId = parseInt(referal);
          const userReferal = await utils.getReferals(referalId);
          if(userReferal) {
            utils.addReferal(userId, referalId);
            utils.linkReferal(userId, referalId);
            ctx.sendMessage("–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç–æ–∫!");
            userDB.coins = userDB.coins + 100;
            const refInventory = await utils.getUserData(referalId);
            refInventory.rolls = refInventory.rolls + 1;
            refInventory.friend_coin = refInventory.friend_coin + 1;
            await utils.updateUserData(referalId, 'rolls', refInventory.rolls);
            await utils.updateUserData(referalId, 'friend_coin', refInventory.friend_coin);
            ctx.telegram.sendMessage(referalId, `–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ø—Ä–∏–≤–µ—Ç—Å–≤—É–π—Ç–µ ${ctx.from?.username || ctx.from.first_name}`)
          }
        }
        await utils.updateUserData(userId, 'coins', userDB.coins)
      }
    }
  }

  let txt = `ü´°–ü—Ä–∏–≤–µ—Ç, ${ctx.from.username}!\n\n`;
  txt +=
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.chat.username}! –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–º—ã üíé –∏–ª–∏ –ª—É–Ω—ã üåô –¥–ª—è –∏–≥—Ä—ã Genshin Impact! –¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –≥–µ–º—ã üí† –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫  üé´ –≤ Honkai: Star Rail!\n\n`;
  txt +=
    `<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É?</b>\n\n`;
  txt += `‚ñ´Ô∏è –ö–∏–¥–∞–π –∫—É–±–∏–∫ üé≤\n`;
  txt += `‚ñ´Ô∏è –°–æ–±–∏—Ä–∞–π –¥–æ–ø. –ë—Ä–æ—Å–∫–∏ üéØ\n`;
  txt += `‚ñ´Ô∏è –ó–∞–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –±—Ä–æ—Å–∫–æ–≤ üí∞\n`;
  txt += `‚ñ´Ô∏è –ò–≥—Ä–∞–π –≤ –º–∏–Ω–∏ –∏–≥—Ä—ã üé∞\n\n`;
  txt += `–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –∑–∞–≥–ª—è–Ω–∏ –≤ ‚ùì FAQ. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—É - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.\n\n`;
  txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞\n`;
  txt += `–¢–≤–æ–∏ –±—Ä–æ—Å–∫–∏: ${user.rolls} üé≤\n\n`;
 
  const subscriptionStatus = user.vip_status
    ? `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${user.vip_status}`
    : "‚ùå";
  txt += `üëë –ü–æ–¥–ø–∏—Å–∫–∞: ${subscriptionStatus}\n`;

  if (edit) {
    try {
      if (user.vip_status > 0) ctx.editMessageText(txt, kb.vip_menu);
      else ctx.editMessageText(txt, kb.menu);
    } catch (e) {}
  } else {
    if (user.vip_status > 0) await ctx.replyWithHTML(txt, kb.vip_menu);
    else await ctx.replyWithHTML(txt, kb.menu);
  }
};

composer.command("start", async (ctx) => {
  try {
    let userDB = await utils.getUserData(ctx.from.id);
    if(ctx.chat.type == 'private') {
      if(!userDB) {
        await utils.createUser(ctx.from.id, ctx.from.first_name);
        userDB = await utils.getUserData(ctx.from.id);
      }
      await ctx.replyWithHTML("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é", kb.menu_kb);
    }
    else {
      if(!userDB) {
        let txt = ctx.from.first_name + ", —á—Ç–æ –±—ã –±—Ä–æ—Å–∫–∞—Ç—å –∫—É–±–∏–∫ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
        txt += "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
        return await ctx.reply(txt, kb.to_bot);
      }
      let txt = "–ò–≥—Ä–∞—Ç—å –≤ –∫—É–±–∏–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n"
      txt += "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
      return await ctx.reply(txt, kb.to_bot);
    }
    const chatMember = await bot.telegram.getChatMember(
      `@${process.env.MAIN_CHANEL}`,
      ctx.from.id
    );

    if (
      chatMember.status !== "member" &&
      chatMember.status !== "administrator" &&
      chatMember.status !== "creator"
    ) {
      return await utils.sendSubscribeKeyboard(ctx, ctx.args[0]);
    }
    await getMenu(ctx, ctx.args[0]);
  } catch (e) {
    console.log(e);
  }
});

composer.command("id", async (ctx) => {
  try {
    await ctx.reply(`–í–∞—à id ${ctx.from.id}`);
  } catch (e) {
    console.log(e);
  }
});

composer.command("roll", async (ctx) => {
  try {
    const userDB = await utils.getUserData(ctx.from.id);
    if(!userDB) {
      let txt = ctx.from.first_name + ", —á—Ç–æ –±—ã –±—Ä–æ—Å–∫–∞—Ç—å –∫—É–±–∏–∫ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
      txt += "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
      return await ctx.reply(txt, kb.to_bot);
    }
    let count = parseInt(ctx.args[0]);
    if(isNaN(count) || !userDB.vip_status) {
      count = 1;
    }
    if(count > 5) {
      count = 5;
    }
    if (userDB.rolls < count) {
      return ctx.reply(`${ctx.from.first_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—Ä–æ—Å–∫–æ–≤`);
    }
    let userRolls = userDB.rolls;
    let userCoins = userDB.coins;
    let allResult = 0;
    let resultMessage = `${ctx.from.first_name}, —Ç—ã –±—Ä–æ—Å–∏–ª ${count} –∫—É–±–∏–∫–æ–≤ üé≤\n\n`;
    while (count > 0) {
      const diceResult = await ctx.replyWithDice();
      count -= 1;
      const selectedResult = diceResult.dice.value;
      const reward = rewards[selectedResult];
  
      if (reward === undefined) {
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã');
          return;
      }
  
      allResult += reward;
      userCoins += reward;
      userRolls -= 1;

      await utils.increaseUserRolls(ctx.from.id);
    }
    await utils.increaseUserEarned(ctx.from.id, allResult);
    await utils.updateUserData(ctx.from.id, 'coins', userCoins);
    await utils.updateUserData(ctx.from.id, 'rolls', userRolls);

    setTimeout(async () => {
      resultMessage += `–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: ${allResult} üí∞\n\n`
      resultMessage += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${userCoins} üí∞\n`
      resultMessage += `–û—Å—Ç–∞–ª–æ—Å—å –±—Ä–æ—Å–∫–æ–≤: ${userRolls} üé≤`
      ctx.reply(resultMessage);
    }, 5000);
  } catch (e) {
    console.log(e);
  }
});


composer.action(/back_to_menu(?:-([\w\d]+))?\b/, async (ctx) => {
  try {
    const matchedText = ctx.match[1] || null;
    const chatMember = await bot.telegram.getChatMember(
      `@${process.env.MAIN_CHANEL}`,
      ctx.from.id
    );
    if (chatMember.status !== "member" && chatMember.status !== "administrator" &&chatMember.status !== "creator") {
      return await ctx.answerCbQuery("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", {show_alert: true});
    } else {
      await ctx.answerCbQuery();
      if (ctx.callbackQuery.message.photo) {
        try {
          await ctx.deleteMessage();
        } catch (e) {}
        await getMenu(ctx, matchedText);
      } else {
        await getMenu(ctx, matchedText, true);
      }
    }
  } catch (e) {
    console.log(e);
  }
});

module.exports = composer;
